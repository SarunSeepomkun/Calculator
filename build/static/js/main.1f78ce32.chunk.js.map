{"version":3,"sources":["components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","useState","firstNumber","setFirstnumber","operand","setOperand","secondNumber","setSecondnumber","result","setResult","setNumber","value","console","log","number","checkOperand","calculate","parseFloat","className","type","readOnly","onClick","e","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1f78ce32.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport \"./Calculator.css\";\r\n\r\nfunction Calculator() {\r\n\r\n    const [ firstNumber , setFirstnumber ] = useState('');\r\n    const [ operand , setOperand] = useState('');\r\n    const [ secondNumber , setSecondnumber ] = useState('');\r\n    const [ result , setResult] = useState('');\r\n\r\n    const setNumber = (value)=>{\r\n        console.log(firstNumber + '' + operand + '' + secondNumber);\r\n        if(operand === '')\r\n        {\r\n            let number = firstNumber + '' + value;\r\n            setFirstnumber(number);\r\n            setResult(number);\r\n        }\r\n        else\r\n        {\r\n            let number = (secondNumber) + '' + (value);\r\n            setSecondnumber(number);\r\n            setResult(number);\r\n        }\r\n    }\r\n\r\n    const checkOperand = (value)=>{\r\n        if(operand === '')\r\n        {\r\n            setOperand(value);\r\n        }\r\n        else{\r\n            setOperand(value);\r\n            calculate();\r\n        }\r\n    }\r\n\r\n    const calculate = ()=>{\r\n        console.log(firstNumber + '' + operand + '' + secondNumber);\r\n        // let prev_result = result;\r\n        if(operand === '+')\r\n        {\r\n            setResult(parseFloat(firstNumber) + parseFloat(secondNumber));\r\n        }\r\n        else if(operand === '-')\r\n        {\r\n            setResult(parseFloat(firstNumber) - parseFloat(secondNumber));\r\n        }\r\n        else if(operand === '*')\r\n        {\r\n            setResult(parseFloat(firstNumber) * parseFloat(secondNumber));\r\n        }\r\n        else if(operand === '/')\r\n        {\r\n            setResult(parseFloat(firstNumber) / parseFloat(secondNumber));\r\n        }\r\n        else\r\n        {\r\n            setResult(firstNumber);\r\n        }\r\n    };\r\n\r\n    const clearData = ()=>{\r\n        setFirstnumber('');\r\n        setOperand('');\r\n        setSecondnumber('');\r\n        setResult('');\r\n    }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"calculator\">\r\n        <div className=\"resultDisplay\">Display\r\n            <input type=\"text\" readOnly={true} className=\"textResult\" value={result} />\r\n        </div>\r\n        <div className=\"grid-container\">\r\n        <div className=\"item1\">\r\n          <button onClick={clearData}>AC</button>\r\n          {/* <button>+/-</button> */}\r\n          <button value=\"%\">%</button>\r\n          <button value=\"/\" onClick={e=>checkOperand(e.target.value)}>/</button>\r\n        </div>\r\n        <div className=\"item2\">\r\n          <button value=\"7\" onClick={e => (setNumber(e.target.value))}>7</button>\r\n          <button value=\"8\" onClick={e => (setNumber(e.target.value))}>8</button>\r\n          <button value=\"9\" onClick={e => (setNumber(e.target.value))}>9</button>\r\n          <button value=\"*\" onClick={e=> (checkOperand(e.target.value))}>*</button>\r\n        </div>\r\n        <div className=\"item3\">\r\n          <button value=\"4\" onClick={e => (setNumber(e.target.value))}>4</button>\r\n          <button value=\"5\" onClick={e => (setNumber(e.target.value))}>5</button>\r\n          <button value=\"6\" onClick={e => (setNumber(e.target.value))}>6</button>\r\n          <button value=\"-\" onClick={e => (checkOperand(e.target.value))}>-</button>\r\n        </div>\r\n        <div className=\"item4\">\r\n          <button value=\"1\" onClick={e => (setNumber(e.target.value))}>1</button>\r\n          <button value=\"2\" onClick={e => (setNumber(e.target.value))}>2</button>\r\n          <button value=\"3\" onClick={e => (setNumber(e.target.value))}>3</button>\r\n          <button value=\"+\" onClick={e => (checkOperand(e.target.value))}>+</button>\r\n        </div>\r\n        <div className=\"item5\">\r\n          <button value=\"0\" onClick={e => (setNumber(e.target.value))}>0</button>\r\n          <button value=\".\" onClick={e => (setNumber(e.target.value))}>.</button>\r\n          <button onClick={calculate}>=</button>\r\n        </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Calculator;\r\n","import React from 'react';\nimport './App.css';\nimport Calculator from './components/Calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}